<html t:type="Border" xmlns:t="http://tapestry.apache.org/schema/tapestry_5_0_0.xsd">

  <h1>JavaScript Tests</h1>

  <p>
    This page executes a number of JavaScript tests.
  </p>

  <div id="tests">

    <h2>Arrays</h2>

    <div>
      <p> Checks for T5.arrays.isEmpty()
        </p>
      <pre>
        assertEqual(isEmpty(null), true)
        assertEqual(isEmpty(undefined), true)
        assertEqual(isEmpty([]), true)
        assertEqual(isEmpty([1]), false)
    </pre>

    </div>
    <div>
      <p> Checks for T5.arrays.isNonEmpty()
        </p>
      <pre>
        assertEqual(isNonEmpty(null), false)
        assertEqual(isNonEmpty(undefined), false)
        assertEqual(isNonEmpty([]),
        false)
        assertEqual(isNonEmpty([1]), true)
    </pre>
    </div>
    <div>
      <p> Map() on null returns an empty array        
        </p>
      <pre>
        assertEqual(map(null, null), [])
        </pre>
    </div>

    <div>
      <p> Map() on undefined returns an empty array    
    </p>
      <pre>
        assertEqual(map(null, undefined), [])    
    </pre>
    </div>

    <div>
      <p>Map() on empty array returns an empty array</p>
      <pre>
        assertEqual(map(null, []), [])
      </pre>
    </div>


    <div>
      <p> The normal use of map().
    </p>
      <pre>
        assertEqual(map(function(e) { return e + 100; }, [1, 2, 3]), [101, 102, 103])   
    </pre>
    </div>

    <div>
      <p> Optional second parameter to map() is an index number.    </p>
      <pre>
        assertEqual(map(function(e, index) { return (e + 100) + "@" + index; }, [1, 2, 3]),
        ["101@0", "102@1",
        "103@2"])                
    </pre>
    </div>

    <div>
      <p> The initial value is returned, as is, when no reducing occurs due to empty/null/undefined list.
    </p>
      <pre>
        var initial = { };
        assertSame(reduce(function() { }, initial, []), initial);   
    </pre>
    </div>

    <div>
      <p> Show that the index of each element is passed to the reducer function.</p>
      <pre>
        assertEqual(reduce(function(o, value, index) {
        o[value] = index; return o;
        }, {}, ["fred", "barney",
        "wilma"]),
        { fred: 0, barney: 1, wilma: 2 })
        </pre>

    </div>

    <div>
      <p> Removing a value that does not exist in the array returns the array unchanged.
    </p>
      <pre>
        var initial = [1, 2, 3]
        assertSame(without(9, initial), initial)
        </pre>
    </div>

    <div>
      <p> Multiple matches should all be removed.</p>
      <pre>
        assertEqual(without(2, [1, 2, 2, 3, 4, 2, 5]), [1, 3, 4, 5])
</pre>
    </div>

    <div>
      <p> The array should not be changed even if values are removed from the result.
</p>
      <pre>
        var initial = [1, 2, 3]
        without(2, initial)
        assertEqual(initial, [1, 2, 3])
</pre>
    </div>

    <div>
      <p>mapcat() on empty/null/undefined returns empty list.
    </p>
      <pre>
        assertEqual(mapcat(null,null), [])</pre>
    </div>

    <div>
      <p> Basic execution of mapcat().
  </p>
      <pre>
        assertEqual(mapcat(function (value) {
        var out = []
        for (var i = 0; i &lt; value; i++) { out.push(value); }
        return out;
        }, [1, 3, 5]),
        [1, 3, 3, 3, 5, 5, 5, 5, 5])            
  </pre>
    </div>

    <div>
      <p>filter() a list.</p>
      <pre>
        assertEqual(filter(function(value) {
        return value % 2 === 0;
        }, [1, 2, 3, 4, 5, 6, 7, 8, 9]), [2, 4, 6, 8])
    </pre>
    </div>

    <div>
      <p>
        Check that filter passes an optional index argument.
    </p>
      <pre>
        assertEqual(filter(function(value, index) {
        return value % 2 === 0 || index % 3 === 0;
        }, [1, 2, 3, 4, 5, 6, 7,
        8, 9]),
        [1, 2, 4, 6, 7, 8])
    </pre>
    </div>

    <div>
      <p>remove() elements from a list.</p>
      <pre>
        assertEqual(remove(function(value, index) {
        return value % 2 !== 0 &amp;&amp; index % 3 !== 0;
        }, [1, 2, 3,
        4,
        5, 6, 7, 8, 9]),
        [1, 2, 4, 6, 7, 8])
        </pre>
    </div>

    <div>
      <p>first() on empty list returns null.</p>
      <pre>
        assertEqual(first(null, null), null)
    </pre>
    </div>

    <div>
      <p>first() match</p>

      <pre>
        assertEqual(first(function(value) { return value &gt; 3; }, [1, 2, 3, 4, 5]), 4)
</pre>
    </div>

    <div>
      <p>first() passes the index as the second value.</p>

      <pre>
        assertEqual(first(function(value, index) { return index &gt; 2 }, [1, 2, 3, 4, 5]), 4)
</pre>

      <div>
        <p>extractProperty() returns a function to extract a named property.</p>
        <pre>
          var fn = T5.arrays.extractProperty('name')

          assertEqual(fn({name: 'Tapestry', id: 5}), 'Tapestry')
    </pre>
      </div>

    </div>

    <h2>Publish / Subscribe</h2>


    <div>
      <p> Ensure that the message object passed to pub() is delivered to the listener.</p>
      <pre>
        var message = { }
        var rcvd;

        sub("foo", function(m) { rcvd = m; })

        pub("foo", message)

        assertSame(rcvd, message)        
        </pre>
    </div>

    <div>
      <p>Check that the function returned from sub() can be used to cancel message reciept.</p>
      <pre>
        var count = 0;

        pub("foo"); assertEqual(count, 0)

        var unsub = sub("foo", function() { count++; } )

        pub("foo");
        assertEqual(count, 1)

        pub("foo"); assertEqual(count, 2)

        pub("bar"); assertEqual(count, 2)

        unsub()

        pub("foo");
        assertEqual(count, 2)
          </pre>
    </div>

    <div>
      <p> Check that messages are published to less specific selectors after more specific.
</p>
      <pre>
        var pubs = []

        sub("foo/bar", function() { pubs.push("foo/bar"); })
        sub("foo", function() {
        pubs.push("foo");
        })

        pub("foo/bar")

        assertEqual(pubs, ["foo/bar", "foo"])                
        </pre>
    </div>

    <div>
      <p>Check that messages to less specific selectors do not invoke listeners of more specific selectors.   </p>
      <pre>
        var pubs = []

        sub("foo/bar", function() { pubs.push("foo/bar"); })

        sub("foo", function() {
        pubs.push("foo");
        })

        pub("foo")

        assertEqual(pubs, ["foo"])                        
        </pre>
    </div>

  </div>

  <script>
<![CDATA[
    isEmpty = T5.arrays.isEmpty
    isNonEmpty = T5.arrays.isNonEmpty;
    map = T5.arrays.map
    mapcat = T5.arrays.mapcat
    reduce = T5.arrays.reduce
    without = T5.arrays.without
    filter = T5.arrays.filter
    remove = T5.arrays.remove
    first = T5.arrays.first

    pub = T5.pub
    sub = T5.sub


    assertEqual = JST.assertEqual
    assertSame = JST.assertSame

    JST.runTestSuite("tests");
    ]]>
  </script>
</html>


 ---
 Component Mixins
 ---
 
Component Mixins

  Tapestry 5 includes a radical feature, <component mixins>.  Component mixins are a tricky concept; it basically allows
  a true component to be mixed together with special limited components called mixins.  The component plus its mixins are
  represented as just a single tag in the component template, but all the behavior of all the elements.
  
  The planned uses for this are to add validation to user input fields, or to add Ajax effects and behaviors to all
  sorts of components.
  
  You can think of a mixin as a kind of mashup for a component; it combines the behavior of the component
  with the behavior of the mixin, and bundles it all in one place.
  
  Mixins are used in two different scenarios: <Instance mixins> and <Implementation mixins>.
  
Mixin Classes

  Mixin classes are stored in a <<<mixins>>> sub-package, below the application (or library)
  root package. This parallels where component and page classes are stored.
  
  Other than that, mixin classes are exactly the same as any other component class.
  
Mixin Limitations

  Currently, mixins are allowed to do anything a component can do, including parameters,
  render phase methods.
  
  Mixins may not have a template. They integrate with the component strictly in terms of invoking
  render phase methods.
  
  Mixins may have persistent fields, but currently, this is not implemented perfectly (there is a potential
  for a name clash between a mixin and the component or another mixin).  Use persistent fields with
  mixins with care ... or better yet, delegate persistence to the container using parameters.
  
  Mixins may not, themselves, have mixins.
  
  
Instance Mixins

  An instance mixin is a mixin applied to a specific <instance> of a component.  This can be done
  in the {{{templates.html}component template}} with the mixins attribute of the
  \<comp\> element.  This is a comma-separated list of mixin names.
  
  Alternately, when the {{{../apidocs/org/apache/tapestry5/annotations/Component.html}Component annotation}}
  is used to define the component type, you may specify the mixins in two ways:
  
  * The {{{../apidocs/org/apache/tapestry5/annotations/Mixins.html}Mixins annotation}} allows a list
    of mixin names to be specified.
    
  * The {{{../apidocs/org/apache/tapestry5/annotations/MixinClasses.html}MixinClasses annotation}}
    allows a set of mixin class to be specified directly.
    
  []
  
  The former is often less verbose, and allows core mixins to be overridden with application-specific
  mixins.  The later format is more specific and more friendly in terms of refactoring (renaming a 
  mixin class will rename the entry in the MixinClasses annotation as well).
  
  Example:
  
+----+

  @Component(parameters=. . .) @Mixins({"Autocomplete", "DefaultFromCookie"})
  private TextField userId;
+----+

  This example defines a component of type TextField and mixes in the <hypothetical> Autocomplete
  and DefaultFromCookie mixins.  


Implementation Mixins

  Implementation mixins, mixins which apply to all isntances of a component, are added using the
  {{{../apidocs/org/apache/tapestry5/annotations/Mixin.html}Mixin annotation}}. This annotation
  defines a field that will containg the mixin instance.
  
+---+
public class AutocompleteField extendes TextField
{
  @Mixin
  private Autocomplete autocompleteMixin;
  
  . . .
}
+---+

  Often, the type of the field is the exact mixin class to be instantiated.
  
  In other cases, such as when the field's type is an interface or a base class, the value
  attribute of the annotation will be used to determine the mixin class name:
  
+---+
public class AutocompleteField extends TextField
{
  @Mixin("Autocomplete")
  private Object autocompleteMixin;
  
  . . .
}
+---+

Mixin Parameters

  Mixins are allowed to have parameters, just like components.
  
  When binding parameters (either in the template, or using the parameters attribute
  of the Component annotation).
  
  Tapestry will match each parameter name against the parameters defined by each class
  (which is to say, the component and each mixin).
  
  If the component and a mix both define a parameter with the same name, then the component wins:
  the component's parameter will be bound, and the mixin's parameter will be unbound.
  
  Alternately, you may prefix the name of the parameter with the <unqualified> name of the Mixin class;
  this eliminates the ambiguity.  Example:
  
+-----+
  @Component(parameters={"Autocomplete.id=auto", . . . }) @Mixins("Autocomplete", "DefaultFromCookie"})
  private TextField userId;
+-----+

Binding the parameter of the core component

  It is sometimes desirable to access the current value of a parameter defined in the component associated with the
  mixin. For example: normally, when the textfield component is marked disabled, it renders a text field with a disabled
  attribute, but you want it to output the (plaintext) value when disabled.  A mixin for this purpose would need access
  to at least the disabled, and value parameters, and possibly the translate parameter (for a client-side representation).
  You can access the disabled parameter via @InjectContainer and checking isDisabled on the field, but textfield
  currently provides no access to value or translate.  In this case, you can bind the core-component parameter using the
  @BindParameter annotation:

+-----+
  public class MyMixin
  {
    @BindParameter
    private boolean disabled;

    @BindParameter
    private FieldTranslator translate;

    @BindParameter
    private Object value;

    Boolean beginRender(MarkupWriter writer)
    {
        ...
        if (disabled)
        {
           ...
           String stringValue = translate.toClient(value));
           ...
        }
        ...
    }
    ....
+-----+

  Tapestry will "link" the disabled, translate, and value fields above to parameters of the same name on the
  associated component.  The fields are not parameters to the mixin, but local copies
  of the component parameter.  They are cached only if the associated component parameter is cached.  They are read-write,
  and Tapestry handles synchronizing the value between mixins and the associated component such that even with a cached
  parameter, components and mixins will share the same value for a given parameter/bound-parameter during render.
  Only declared parameters of the associated components may be bound.
  
  By default, Tapestry will bind the parameter with the same name as the field. You can explicitly declare the parameter
  to bind via the value attribute:

+-----+
  @BindParameter("translate")
  private FieldTranslator translator;
+-----+

  In same cases, a mixin will be used on different components using different names for a similar parameter type.
  For instance, BeanEditor has an "object" parameter; most form fields have a "value" parameter, and Grid has a
  "source" parameter.  These parameters have different names but share the feature of being the "principle" parameter
  on which the components are acting.  A mixin useable by all three components can specify multiple potential
  parameter values to bind.  The first value that matches a declared parameter of the associated component will be used:

+-----+
public class MyMixin
{
  ...
  @BindParameter({"value","object","source"})
  private Object principalObject;
  ...
}
+-----+

  "MyMixin" can be used on a textfield (principalObject is bound to "value"), on BeanEditor or BeanDisplay
  (principalObject is bound to "object"), or on Grid or Loop (principalObject is bound to "source").

Render Phase Ordering

  All mixins for a component execute their render phase methods <before> the component's render phase
  methods for most phases.  However, in the later phases (AfterRender, CleanupRender) the order of executing
  is reversed.
  
  Exception: Mixins whose class is annotated with
  {{{../apidocs/org/apache/tapestry5/annotations/MixinAfter.html}MixinAfter}} are ordered
  <after> the component, not before.

  Withing a given phase and class (@MixinAfter vs. mixin before), mixin ordering is determined by the ordering
  constraints specified in the mixin definitions.  The constraint definitions follow the same conventions as
  {{{../tapestry-ioc/order.html}ordered service configurations}}.  How you specify the constraints depends
  on how the mixin is specified.

  Implementation Mixin:

+-----+
  @Mixin("Autocomplete",order={"before:DiscardBody","after:RenderDisabled"}
  private TextField userId;
+-----+

  Template-specified instance mixins:

+-----+
  \<input t:id="myfield" t:mixins="autocomplete::before:discardbody;after:renderdisabled,
          defaultfromcookie::before:autocomplete"/\>
+-----+

  @Mixins-specified instance mixins:

+-----+
  @Component(...)
  @Mixins("Autocomplete::before:discardbody;after:renderdisabled","DefaultFromCookie::before:autocomplete"))
  private TextField userId;
+-----+

  @MixinClasses-specified instance mixins:

+-----+
  @Component(...)
  @MixinClasses(value={Autocomplete.class,DefaultFromCookie.class},
                order={"before:discardbody;after:renderdisabled","before:autocomplete")
+-----+

  The ordering is always specified in terms of the order of the "forward" rendering process (setupRender,
  beginRender, etc.). When the "reverse" rendering phases (afterRender, etc.) occur, the mixin order is exactly reversed.
  Mixins which have no associated ordering constraints will be ordered in a manner which is consistent with the
  specified constraints for all other mixins, but is otherwise unspecified.

description = "Apache Tapestry 5 Project"

if (!project.hasProperty('apacheDeployUserName')) apacheDeployUserName = '*UNSET-USERNAME*'
if (!project.hasProperty('apacheDeployPassword')) apacheDeployPassword = '*UNSET-PASSWORD*'


jettyVersion = '7.0.0.v20091005'
tomcatVersion = '6.0.30'
testngVersion = '5.14.9'
easymockVersion = '3.0'
servletAPIVersion = '2.4'

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy' // mostly for testing
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'project-report'
    
    sourceCompatibility = '1.5'
    targetCompatibility = '1.5'
    
    version = '5.3.0-SNAPSHOT'

    group = 'org.apache.tapestry'
    
    repositories {
        mavenCentral()
               
        // All things JBoss/Javassist/Hibernate
        mavenRepo urls: "https://repository.jboss.org/nexus/content/repositories/releases/" 
    }
    
    configurations {
		provided
        deployerJars
    }

    // See http://jira.codehaus.org/browse/GRADLE-784
    
    sourceSets {
      main { 
        compileClasspath += configurations.provided 
      }
      test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
      }
    }
    

    dependencies {
        groovy "org.codehaus.groovy:groovy-all:1.7.4"
        
        deployerJars "org.apache.maven.wagon:wagon-http-lightweight:1.0-beta-6"
    }
    
    test {
        useTestNG()
        
        options.suites("src/test/conf/testng.xml")
        
        maxHeapSize = "400M"
        
        // Turn off live service reloading

        systemProperties["tapestry.service-reloading-enabled"] = "false"

        jvmArgs("-XX:MaxPermSize=512m")        
    }
    
    task sourcesJar(type: Jar, dependsOn:classes) {
       classifier = 'sources'
       from sourceSets.main.allSource
    }

    artifacts {
       archives sourcesJar
    }    
    
    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            // apacheDeployUserName and apacheDeployPassword should be specified in ~/.gradle/gradle.properties
            snapshotRepository(url: "https://repository.apache.org/content/repositories/snapshots/") {
              authentication(userName: apacheDeployUserName, password: apacheDeployPassword)
            }
            
        }
    }
}

configurations {
  javadoc
}

dependencies {
  // javadoc project(':tapestry-javadoc') -- temporarily removed
}

subprojects.each { evaluationDependsOn(it.name) }

// Cribbed from https://github.com/hibernate/hibernate-core/blob/master/release/release.gradle#L19

javadocBuildDir = dir(buildDirName + "/documentation/javadocs")

task aggregateJavadoc(type: Javadoc) {

   dependsOn configurations.javadoc
   
   description = "Build the aggregated JavaDocs for all modules"
   maxMemory = '512m'
   destinationDir = javadocBuildDir.dir
   configure(options) {
       // overview = new File( projectDir, 'src/javadoc/package.html' )
       // stylesheetFile = new File( projectDir, 'src/javadoc/stylesheet.css' )
       windowTitle = 'Tapestry API Documentation'
       docTitle = "Tapestry JavaDoc ($project.version)"
       bottom = "Copyright &copy; 2003-2011 <a href=\"http://tapestry.apache.org\">The Apache Software Foundation</a>."
       use = true
       links = [ 'http://download.oracle.com/javase/6/docs/api/', 'http://download.oracle.com/javaee/6/api/' ]
       addStringOption "tagletpath", configurations.javadoc.asPath
       addStringOption "taglet", "org.apache.tapestry5.javadoc.TapestryDocTaglet"
   }

   subprojects.each { subProject->

       subProject.sourceSets.each { set ->
		
           if ("test" != set.name) {
               source set.java

               if (classpath) {
                   classpath += set.classes + set.compileClasspath
               }
               else {
                   classpath = set.classes + set.compileClasspath
               }
           }
       }
   }
}

task clean(type: Delete) {
  delete buildDirName
}

task continuousIntegration(dependsOn: [subprojects.build /* , 'aggregateJavadoc' */])
Scratch pad for changes destined for the 5.4 release notes page.

# Non-Breaking Changes:

A new DeprecationWarning service exists to write runtime-warnings about deprecated component parameters.

There have been sweeping changes to the client-side support in JavaScript, including the long-awaited abstraction layer.
Tapestry is moving to the use of asynchronously-loaded modules, using the RequireJS module. Much of Tapestry's existing
JavaScript libraries are being recoded as JavaScript modules; in 5.5, the remaining JavaScript libraries will be removed.

All of the clients-side objects available inside the T5 or Tapestry objects (in Tapestry 5.3) are considered deprecated
in Tapestry 5.4.  Where possible, the implementations of such objects have been reworked to use the new support provided
by the modules. In many cases, logic that was previously supplied using client-side objects and the T5.initializers
object is now provided using the event handlers.

The abstraction layer is a set of wrappers that encapsulate most of the differences between Prototype and jQuery (or
other, more modern JavaScript foundation libraries). By coding the the abstraction layer, it will be possible to swap
out Prototype support for jQuery.  Prototype will no longer be bundled with Tapestry starting in Tapestry 5.5.

Prior releases of Tapestry would require several moving parts to initialize client behavior:

* A unique id, generated on the server, on a client-side element
* A JavaScript library that extended T5.initializers with an initialization function
* Creating a _spec_ to describe behavior, including URLs and the unique client element id
* Many similar client-side event handlers on specific elements (created by the initialization function)

Although this was well-structured, it had pain points for developers, as well as some client-side performance issues.
For example, it means that components that occur many times on the page will include many similar event handler
functions.

Tapestry 5.4 represents a shift to a more modern, lighter approach. Behavior of components is encoded into
`data-` attributes on the element, and logic shifts to a module that provides top-level event handlers on the
body object. This is an overall win: it reduces the number of event handlers, solves some timing issues related
to running initialization functions, deals with DOM updates better, and is overall more performant.

Many of the name constants defined by the client-side Tapestry object (such as Tapestry.FORM_PREPARE_FOR_SUBMIT_EVENT)
have had their values changed (for consistency with the new set of events defined by the `core/events` module); code
that uses literal values (such as "tapestry:formprepareforsubmit") will break; code that correctly used the constants
will continue to work, even though the names have changed.

Tapestry is moving away from "magic class names" to a more uniform approach based on the use of HTML 5 compliant "data-"
attributes.

* data-prevent-submission: Used on a HTML form to indicate that normal submission should be suppressed; typically because
  client-side code will be submitting the form's contents via an Ajax request.

* data-skip-validation: Used on an HTML form; the immediately subsequent form submission will skip all validation.
  This is often associated with buttons that cause a form to be canceled or otherwise submitted without client-side
  validation.

* data-validation: Used on form control elements; a non-null value indicates that the field should have the
  `events.field.validate` event triggered on it, when the form is validating, prior to submission.

# Breaking Changes:

The FormFragment component's visibleBound parameter is no longer supported; it was used to make a decision about how
far up the DOM above the FormFragment's client-side element should be searched when determining visibility. This may
resurface in the future as a CSS expression, but is currently not supported.

The definition of the symbol 'tapestry.asset-path-prefix' has changed; it no longer includes the leading and trailing
slashes. The default in 5.3 was "/assets/", in 5.4 it is simply "assets".

JavaScript Libraries (including stacks) are being replaced with modules. Note that libraries are now loaded with
RequireJS, which may mean that global values exported by the libraries are not visible; you should explicitly attach
properties to the global JavaScript window object, rather than assume that the context (this) is the window.

The interface org.apache.tapestry5.services.assets.ResourceTransformer has had a new method added:
getTransformedContentType(). This makes it possible to determine which file extensions map to which content types
(for example, a ResourceTransformer for CoffeeScript files, with extension ".coffee", would map to "text/javascript").

Older versions of Tapestry included client-side support for an element with the CSS class "t-zone-update" as the actual
element to be updated when new content is provided for the zone in a partial page render response. This feature has been
removed with no replacement.

The Tapestry.ElementEffects object has changed significantly.  Despite the names of the properties (kept for compatibility),
all "effects" now simply make the element appear or hide, with no animation.  The value returned from these methods is
now an ElementWrapper, as defined by the core/spi module.

Tapestry code no longer makes use of Scriptaculous. Instead, Tapestry will fire events on elements, and user code may
decide to animate them using whatever library is desired. The event names are defined in the core/events module.

On the client side, the "floating console" is only used in cases where a native console is not available.

Support for validating fields on blur (i.e., when tabbing out of a field) has been removed. Validation now occurs when
the form is submitted, or not at all. The ClientValidation.BLUR enum value has been deprecated and is now treated as
SUBMIT.

Prior releases of Tapestry mapped "true" and "false" values for Form.clientValidation to BLUR and NONE. This mapping
was introduced in Tapestry 5.2, and has now been removed.

Tapestry.FormEventManager has been entirely removed, along with supporting function Element.getFormEventManager().

Tapestry.FieldEventManager.getIcon() now always returns null. The icon image is no longer rendered (on the server)
by the DefaultValidationDecorator. Shortly, a switch to using Twitter Bootstrap to present validation errors
will occur.

Tapestry 5.3 contained code that attempted to prevent Ajax requests until after the page had loaded; this was based
on the function Tapestry.waitForPage().  Server components no longer make use of this function, and the function
itself now does nothing. A replacement approach to preventing the user from interacting with links and forms before
the page initialization has completed may be implemented in the future.

Many functions on the Tapestry object have been removed, as they were only used internally:
- rebuildURL
- stripToLastSlash

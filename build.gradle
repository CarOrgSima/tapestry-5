description = "Apache Tapestry 5 Project"

// Remember that when generating a release, this should be incremented. Also don't forget to
// tag the release in Subversion.
tapestryVersion = "5.4-alpha-1"

jettyVersion = '7.0.0.v20091005'
tomcatVersion = '6.0.30'
testngVersion = '5.14.9'
easymockVersion = '3.0'
servletAPIVersion = '2.5'

// Provided so that the CI server can override the normal version number for nightly builds.
version = System.getProperty('project-version', tapestryVersion)

stagingUrl = "https://repository.apache.org/service/local/staging/deploy/maven2/"
snapshotUrl = "https://repository.apache.org/content/repositories/snapshots"

doSign = !project.hasProperty('noSign') && project.hasProperty("signing.keyId")

allprojects {

  apply plugin: 'eclipse'
  apply plugin: 'idea'

  repositories {
    mavenCentral()

    // All things JBoss/Hibernate
    mavenRepo name: "JBoss", url: "https://repository.jboss.org/nexus/content/repositories/releases/"
  }

  idea {
    project {
      // Technically, Tapestry is built for JDK 1.5, but we're all using Eclipse or IntelliJ with
      // JDK 1.6 at this point.
      jdkName = "1.6"
    }
  }

}

subprojects {
  version = parent.version

  group = 'org.apache.tapestry'

  configurations {
    provided
    deployerJars

    // meta -- non-code artifacts, such as sources and javadoc JARs
    meta
  }

  apply plugin: 'java'
  apply plugin: 'groovy' // mostly for testing
  apply plugin: 'maven'
  apply plugin: 'project-report'

  sourceCompatibility = '1.5'
  targetCompatibility = '1.5'

  // See http://jira.codehaus.org/browse/GRADLE-784

  sourceSets {
    main {
      compileClasspath += configurations.provided
    }
    test {
      compileClasspath += configurations.provided
      runtimeClasspath += configurations.provided
    }
  }

  idea.module {
    scopes.PROVIDED.plus += configurations.provided
  }

  dependencies {
    groovy "org.codehaus.groovy:groovy-all:1.7.4"

    deployerJars "org.apache.maven.wagon:wagon-http-lightweight:1.0-beta-6"
  }

  test {
    useTestNG()

    options.suites("src/test/conf/testng.xml")

    maxHeapSize "400M"

    // Turn off live service reloading

    systemProperties["tapestry.service-reloading-enabled"] = "false"

    jvmArgs("-XX:MaxPermSize=512m", "-Dfile.encoding=UTF-8")
  }

  task sourcesJar(type: Jar) {
    dependsOn classes
    classifier 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    meta sourcesJar
  }


  configurations {
    // published -- what gets uploaded to the Nexus repository
    published.extendsFrom archives, meta

    if (doSign) { 
      published.extendsFrom signatures 
    }
  }

  if (doSign) {
    apply plugin: 'signing'
    // sign (create PGP signature for) archives (standard JARs)
    // and meta (sources JARs)
    signing { sign configurations.archives, configurations.meta }
  }

  // apacheDeployUserName and apacheDeployPassword should be specified in ~/.gradle/gradle.properties

  deployUsernameProperty = isSnapshot() ? "snapshotDeployUserName" : "apacheDeployUserName"
  deployPasswordProperty = isSnapshot() ? "snapshotDeployPassword" : "apacheDeployPassword"
  canDeploy = [deployUsernameProperty, deployPasswordProperty].every { project.hasProperty(it) }

  uploadPublished {

    doFirst {
      if (!canDeploy) {
        throw new InvalidUserDataException("Missing upload credentials. Set '$deployUsernameProperty' and '$deployPasswordProperty' project properties.")
      }
    }

    if (canDeploy) {
      repositories {

        project.deployer = repositories.mavenDeployer {

          repository(url: stagingUrl) {
            authentication(userName: project.getProperty(deployUsernameProperty), password: project.getProperty(deployPasswordProperty))
          }

          snapshotRepository(url: snapshotUrl) {
            authentication(userName: project.getProperty(deployUsernameProperty), password: project.getProperty(deployPasswordProperty))
          }
        }
      }
    }
  }
}

// Specific to top-level build, not set for subprojects:

configurations {
  javadoc
  published.extendsFrom archives, meta
  if (doSign) { 
    published.extendsFrom signatures 
  }
}

dependencies {
  javadoc project(':tapestry-javadoc')
}

subprojects.each { project.evaluationDependsOn(it.name) }

// Cribbed from https://github.com/hibernate/hibernate-core/blob/master/release/release.gradle#L19

task aggregateJavadoc(type: Javadoc) {

  dependsOn configurations.javadoc
  group "Documentation"

  description "Build the aggregated JavaDocs for all modules"
  maxMemory '512m'
  destinationDir file("$buildDirName/documentation/javadocs")
  configure(options) {
    splitIndex true
    linkSource true
    stylesheetFile file('src/javadoc/stylesheet.css')
    windowTitle 'Tapestry API Documentation'
    docTitle "Tapestry JavaDoc ($project.version)"
    bottom 'Copyright &copy; 2003-2012 <a href="http://tapestry.apache.org">The Apache Software Foundation</a>.'
    use = true // 'use' seems to be a reserved word for the DSL
    links 'http://download.oracle.com/javase/6/docs/api/'
    links 'http://download.oracle.com/javaee/6/api/'
    addStringOption "tagletpath", configurations.javadoc.asPath
    addStringOption "taglet", "org.apache.tapestry5.javadoc.TapestryDocTaglet"
    exclude "org/apache/tapestry5/internal/plastic/asm/**"
  }

  subprojects.each({ sp -> sp.name != "quickstart" }).each { sp ->
    sp.sourceSets.find { set -> set.name != "test" }.each { set ->

      source set.java

      classpath += set.output + set.compileClasspath

      // Some of the component .xdoc files refer to PNG images
      // (we could also just exclude .java and .xdoc and copy anything else)
      copy {
        from set.java.srcDirs.toList()
        into aggregateJavadoc.destinationDir
        include '**/*.png'
      }
    }
  }
}

aggregateJavadoc.doLast {
  copy {
    from file('src/javadoc/images')
    into aggregateJavadoc.destinationDir
  }
}

task clean(type: Delete) {      
  delete buildDirName
}

task continuousIntegration {
  dependsOn subprojects.build, 'aggregateJavadoc', subprojects.uploadPublished
  description "Task executed on Jenkins CI server after SVN commits"
}

task generateRelease {
  dependsOn 'quickstart:clean', 'continuousIntegration', subprojects.uploadPublished, 'zippedSources', 'zippedJavadoc'
  group "Release artifact"
  description "Generates and uploads a final release to Apache Nexus"
}

task wrapper(type: Wrapper) {
  description "Regenerates the Gradle Wrapper files"
}

task zippedSources(type: Zip) {
  description "Creates a combined Zip file of all sub-project's sources"
  group "Release artifact"

  destinationDir buildDir
  baseName "apache-tapestry"
  version project.version
  classifier "sources"

  from project.projectDir
  exclude "out/**"
  exclude "**/*.iml"
  exclude "**/*.ipr"
  exclude "**/*.iws"
  exclude "**/.*/**"
  exclude "**/bin/**"
  exclude "**/target/**"
  exclude "**/build/**"
  exclude "**/test-output/**"  // Left around by TestNG sometimes
}

task zippedJavadoc(type: Zip) {
  dependsOn aggregateJavadoc
  description "Zip archive of the project's aggregate JavaDoc"
  group "Release artifact"

  destinationDir buildDir
  baseName "apache-tapestry"
  version project.version
  classifier "javadocs"

  from aggregateJavadoc.outputs.files
  into "apidocs"
}

boolean isSnapshot() {
  project.version.contains('SNAPSHOT')
}

<html t:type="Border" xmlns:t="http://tapestry.apache.org/schema/tapestry_5_0_0.xsd">

  <h1>JavaScript Tests</h1>

  <p>
    This page executes a number of JavaScript tests.
  </p>

  <table id="results-table">

    <tr>
      <td>
        <pre>
          assertEqual(isEmpty(null), true)
          assertEqual(isEmpty(undefined), true)
          assertEqual(isEmpty([]), true)
          assertEqual(isEmpty([1]), false)
    </pre>
      </td>
      <td>
        Checks for T5.arrays.isEmpty()
    </td>
    </tr>
    
        <tr>
      <td>
        <pre>
          assertEqual(isNonEmpty(null), false)
          assertEqual(isNonEmpty(undefined), false)
          assertEqual(isNonEmpty([]), false)
          assertEqual(isNonEmpty([1]), true)
    </pre>
      </td>
      <td>
        Checks for T5.arrays.isNonEmpty()
    </td>
    </tr>

    <tr>
      <td>
        assertEqual(map(null, null), [])
    </td>
      <td>
        Map() on null returns an empty array
    </td>
    </tr>

    <tr>
      <td>
        assertEqual(map(null, undefined), [])
    </td>
      <td>
        Map() on undefined returns an empty array
    </td>
    </tr>

    <tr>
      <td>
        assertEqual(map(null, []), [])
    </td>
      <td>Map() on empty array returns an empty array</td>
    </tr>

    <tr>
      <td>
        assertEqual(map(function(e) { return e + 100; }, [1, 2, 3]), [101, 102, 103])
        </td>
      <td>
        The normal use of map().
        </td>
    </tr>

    <tr>
      <td>
        <pre>
          assertEqual(map(function(e, index) { return (e + 100) + "@" + index; }, [1, 2, 3]),
          ["101@0", "102@1",
          "103@2"])            
        </pre>
      </td>
      <td>
        The normal use of map().
        </td>
    </tr>

    <tr>
      <td>
        <pre>
          var initial = { };
          assertSame(reduce(function() { }, initial, []), initial);
        </pre>
      </td>
      <td>
        The initial value is returned, as is, when no reducing occurs due to empty/null/undefined list.
        </td>
    </tr>

    <tr>

      <td>
        <pre>
          assertEqual(reduce(function(o, value, index) {
          o[value] = index;

          return o;
          }, {}, ["fred", "barney",
          "wilma"]),
          { fred: 0, barney: 1, wilma: 2 })
        </pre>
      </td>
      <td>
        Show that the index of each element is passed to the reducer function.</td>
    </tr>

    <tr>
      <td>
        <pre>
          var initial = [1, 2, 3]
          assertSame(without(9, initial), initial)
        </pre>
      </td>
      <td>
        Removing a value that does not exist in the array returns the array unchanged
        </td>
    </tr>

    <tr>
      <td>
        assertEqual(without(2, [1, 2, 2, 3, 4, 2, 5]), [1, 3, 4, 5])
        </td>
      <td>
        Multiple matches should all be removed
        </td>
    </tr>

    <tr>
      <td>
        <pre>
          var initial = [1, 2, 3]
          without(2, initial)
          assertEqual(initial, [1, 2, 3])
          </pre>
      </td>
      <td>
        The array should not be changed even if values are removed from the result
        </td>
    </tr>

    <tr>
      <td>assertEqual(mapcat(null,null), [])</td>
      <td>mapcat() on empty/null/undefined returns empty list</td>
    </tr>

    <tr>
      <td>
        <pre>
          assertEqual(mapcat(function (value) {
          var out = []
          for (var i = 0; i &lt; value; i++) { out.push(value); }
          return out;
          }, [1, 3, 5]),
          [1, 3, 3, 3, 5, 5, 5, 5, 5])            
            </pre>
      </td>
      <td>
        Basic execution of mapcat().
      </td>
    </tr>

    <tr>
      <td>
        <pre>
          var message = { }
          var rcvd;

          sub("foo", function(m) { rcvd = m; })

          pub("foo", message)

          assertSame(rcvd,
          message)        
        </pre>
      </td>
      <td>
        Ensure that the message object passed to pub() is delivered to the listener.</td>
    </tr>

    <tr>
      <td>
        <pre>
          var count = 0;

          pub("foo"); assertEqual(count, 0)

          var unsub = sub("foo", function() { count++; } )

          pub("foo");
          assertEqual(count, 1)

          pub("foo"); assertEqual(count, 2)

          pub("bar"); assertEqual(count, 2)

          unsub()

          pub("foo");
          assertEqual(count, 2)
          </pre>
      </td>
      <td>
        Check that the function returned from sub() can be used to cancel message reciept</td>
    </tr>

    <tr>
      <td>
        <pre>
          var pubs = []

          sub("foo/bar", function() { pubs.push("foo/bar"); })
          sub("foo", function() {
          pubs.push("foo");
          })

          pub("foo/bar")

          assertEqual(pubs, ["foo/bar", "foo"])                
        </pre>
      </td>
      <td>
        Check that messages are published to less specific selectors after more specific.
        </td>
    </tr>

    <tr>
      <td>
        <pre>
          var pubs = []

          sub("foo/bar", function() { pubs.push("foo/bar"); })
          sub("foo", function() {
          pubs.push("foo");
          })

          pub("foo")

          assertEqual(pubs, ["foo"])                
        </pre>
      </td>
      <td>
        Check that messages to less specific selectors do not invoke listeners of more specific selectors.        </td>
    </tr>
  </table>

  <script>
<![CDATA[
    isEmpty = T5.arrays.isEmpty
    isNonEmpty = T5.arrays.isNonEmpty;
    map = T5.arrays.map
    mapcat = T5.arrays.mapcat
    reduce = T5.arrays.reduce
    without = T5.arrays.without

    pub = T5.pub
    sub = T5.sub


    assertEqual = JST.assertEqual
    assertSame = JST.assertSame

    JST.runTestSuite("results-table");
    ]]>
  </script>
</html>

